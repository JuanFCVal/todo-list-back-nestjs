module.exports = {
  extends: ['next'],
  rules: {
    'no-restricted-globals': 0,
    '@typescript-eslint/interface-name-prefix': 0,
    'filenames/match-regex': [
      'error',
      new RegExp('[a-z0-9]*' + '(.test)?' + '(.ts)?$' + '|^.eslintrc$', 'gmi'),
    ],
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'variable',
        format: ['camelCase', 'PascalCase', 'UPPER_CASE', 'snake_case'],
        filter: {
          regex: '^((es|en)_([A-Z]+))$', // exception for language constants. Ex: es_EC
          match: false,
        },
        leadingUnderscore: 'allow',
      },
      {
        selector: 'interface',
        format: ['PascalCase'],
        custom: {
          regex: '^([I]+)$',
          match: false,
        },
      },
      {
        selector: 'parameter',
        format: ['camelCase'],
        filter: {
          // exception for parameters with double underscore. Ex: parameter that receives dangerouslySetInnerHTML called __html
          regex: '(__[a-zA-Z0-9_]*(__)?)', 
          match: false,
        },
        leadingUnderscore: 'allow',
      },
      {
        selector: 'property',
        format: ['camelCase', 'UPPER_CASE', 'snake_case', 'PascalCase'],
        filter: {
          // exception for properties with same validation of language constants and double underscore.
          // Ex: call property es_EC in object or check __html have correct value inside the tests
          regex: '^((es|en)_([A-Z]+)|(__[a-zA-Z0-9_]*(__)?))$',
          match: false,
        },
        leadingUnderscore: 'allow',
      },
    ],
    '@typescript-eslint/explicit-module-boundary-types': 0,
    'eslint-comments/no-unlimited-disable': 0,
    'import/no-unresolved': 'off',
    'react/display-name': 0,
  },
}
